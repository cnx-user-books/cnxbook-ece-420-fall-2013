<document xmlns="http://cnx.rice.edu/cnxml">

<title>Lab 5: Histogram equalization</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m47714</md:content-id>
  <md:title>Lab 5: Histogram equalization</md:title>
  <md:abstract>Students will implement histogram equalization on the Android platform. Concepts include color conversion, histograms, cumulative distribution functions, and tone mappings.</md:abstract>
  <md:uuid>5d3ebabc-af79-43f6-891e-07a9a2ba277c</md:uuid>
</metadata>

<content>
  <section id="eip-375"><title>Lab Overview</title><para id="eip-237">In this lab, you will create an Android application that performs histogram equalization on streaming video, and deploy it on the Google Nexus 7 tablet. You will input a video stream from the front-facing camera, equalize each frame of video, and then display the equalized video on the screen alongside the unprocessed video.
</para></section><section id="eip-875"><title>Part 1: Setting up Android and Eclipse</title><para id="eip-935">After completing Lab 4, you should be familiar with the Android development process, and you should feel comfortable working with Eclipse and the Nexus 7. This includes understanding the difference between Java and native C code, being able to compile and run your code on the tablet, and using both the Java and C debuggers to troubleshoot your code.</para></section><note id="eip-86">If you are not familiar with all of the above concepts, go back to Lab 4 and read the relevant sections.</note><list id="eip-774" list-type="enumerated" number-style="arabic"><item>Start Cygwin by double-clicking on <code>C:\NvPack\cygwin\cygwin.bat</code></item>
<item>In the prompt, navigate to the Eclipse folder by typing <code>cd /cygdrive/c/NvPack/eclipse</code></item>
<item>Launch Eclipse with <code>./eclipse</code></item></list><para id="eip-865">Once Eclipse opens, select <code>File &gt; Import...</code>
<list id="eip-434" list-type="enumerated" number-style="arabic"><item>General &gt; Existing Projects into Workspace</item>
<item>V:\ece420\nexus\OpenCV - 2.4.5</item>
<item>V:\ece420\nexus\Lab5\</item>
<item>Check "Copy into Workspace"</item></list></para><para id="eip-669">Additionally, in Lab5 <code>Project Properties &gt; Android</code>, remove the current reference to the OpenCV library, which should have a red check mark next to it, and add the library that is in your workspace.</para><para id="eip-186">The lab machines currently do not support Android 4.2.2. If your tablet has upgraded, you have two options:
<list id="eip-id1169647838420"><item>Get a TA to roll back your OS to 4.1.2. See this <link document="m45788" window="new">link</link> for instructions.</item> 
<item>Develop on your own machine by installing the latest Nvidia Tegra Development Pack.</item>
</list></para><para id="delete_me">For this lab project, the build process in Eclipse has already been configured to build everything automatically, and so building your project is as simple as clicking <code>Project &gt; Build Project</code>.<note id="eip-936" type="tip">You may want to uncheck <code>Build Automatically</code>, and then build by first <code>Clean</code>ing the project and checking the "Immediately start build" option.</note></para><para id="eip-600">The first time you run the application, you will be asked to download the OpenCV Manager from the Play Store; make sure you are connected to the internet.</para><para id="eip-856">Running the demo now will only stream video in grayscale. Pressing the <code>...</code> in the corner of the screen will bring up the options menu, allowing you to view the RGB or equalized image; you will implement these functionalities in Parts 2 and 3.</para><section id="eip-282"><title>Part 2: Color Conversion</title><para id="eip-804">In this part, you will implement your own color-conversion algorithm. The purpose is to obtain a better understanding of different color spaces, along with becoming more comfortable with accessing multidimensional data in an environment other than MATLAB.</para><para id="eip-536">As discussed in the prelab, there is more than one way to represent the pixels in an image. We will be applying histogram equalization in a color space known as YUV. The Y channel encodes the luma component (brightness), and the U and V are the chroma (color) components. The equalized image will be displayed in RGB.</para><para id="eip-18">The pixels received as input from the camera are in the YUV420sp format, which signifies how the data is packed into a linear array. The <link url="http://en.wikipedia.org/wiki/YUV" window="new">Wikipedia article on YUV</link>, especially the section titled <emphasis>"Y'UV420p (and Y'V12 or YV12) to RGB888 conversion"</emphasis>, may be a useful reference; make sure that you thoroughly understand the structure of a single frame of data.</para><para id="eip-780">Open <code>jni_part.cpp</code> and complete the <code>YUV2RGB()</code> function. You will be able to see your results by selecting "Preview RGB" from the options menu.</para><para id="eip-863">To learn how to access individual pixel values, read the <link url="http://docs.opencv.org/doc/user_guide/ug_mat.html" window="new">OpenCV documentation on basic operations with images</link>. It is also important to know that you are working with images that use 8-bit unsigned pixel values.</para><para id="eip-712">To assist you in writing the conversion code, you may reference the
<link url="http://en.wikipedia.org/wiki/YUV#Y.27UV420p_.28NV21.29_to_ARGB8888_conversion" window="new">YUV to RGB conversion code</link> provided on Wikipedia. Remember, you will need to access the pixel values using the proper matrix syntax. See the <link url="http://docs.opencv.org/doc/user_guide/ug_mat.html" window="new">OpenCV matrix documentation</link>.

<note id="eip-id1172797692929">
Make sure you understand every single line of the code. We are allowing you to use this (very helpful) resource instead of writing the code from scratch, but you need to fully understand how the conversion is taking place.
</note></para><para id="eip-502">After you verify you are streaming color images, continue on to the next part to implement histogram equalization.
</para></section><section id="eip-104"><title>Part 2: Histogram Equalization Implementation</title><para id="eip-706">In <code>jni_part.cpp</code> in the <code>HistEQ()</code> function, notice that the lines <newline/>
<newline/>
<code>    Mat* pYUV=(Mat*)addrYuv; </code> <newline/>
<code>    Mat* pRGB=(Mat*)addrRgba; </code> <newline/>
<newline/>
set up pointers to the video input and output. One frame of video lies in the matrix pointed to by <code>pYUV</code>. Your assignment is to modify this matrix of pixels so that the left half of the image is histogram equalized, and the right half of the image remains unprocessed. Then you will need to convert the YUV format image to RGB format and save it in the matrix pointed to by <code>pRGB</code>. This HistEQ C function is called every time a new video frame is ready to be processed, allowing an entire video stream to be processed over time.

The algorithm can be broken up into 4 steps:
<list id="eip-436" list-type="enumerated" number-style="arabic" class="stepwise"><item>Compute the histogram of the Y channel</item>
<item>Compute the CDF of the histogram</item>
<item>Apply equalization to the Y channel</item>
<item>Convert the equalized image to RGB</item></list></para><para id="eip-939">Unless you are already familiar with histogram equalization, reading the <link url="http://docs.opencv.org/doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization.html" window="new">OpenCV histogram equalization tutorial</link> should be helpful in understanding how this algorithm affects an image. OpenCV is an open source computer vision library that provides many useful functions for Android developers to use when creating applications that rely on image and video processing. You will use some of OpenCV's functionality in this lab.</para><note id="eip-798">OpenCV provides optimized functions for histogram equalization and color conversion. You are implementing your own in hopes that you will become accustomed to working with pixel values directly. For future projects, you will be encouraged to use the built-in functionalities, and focus on putting an entire system together.</note><note id="eip-783" type="important">Make sure you conceptually understand what you are about to implement (the above 4 steps). In a few minutes you will be diving in to a lot of details, so take a second to verify your understanding of the algorithm.</note><section id="eip-501"><title>Step 1: Compute histogram of Y channel</title><para id="eip-236">Once you have received data in from the camera in YUV format, you will need to create a histogram of the values of the Y channel in that frame.
</para><note id="eip-769" type="tip">Your histogram can be represented simply as an array. What size will the array need to be? What type?</note></section><section id="eip-586"><title>Step 2: Compute CDF of histogram</title><para id="eip-400">Next, you must compute the cumulative distribution function (CDF) of your histogram. The CDF will be used in the next step to equalize the histogram.</para><note id="eip-418">Make sure to normalize your CDF so that the range is 0 to 255.</note></section><section id="eip-133"><title>Step 3: Apply histogram equalization</title><para id="eip-59">Take each Y channel value as an index into the CDF to obtain the equalized Y channel value. Read the <link url="http://docs.opencv.org/doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization.html" window="new">OpenCV histogram equalization tutorial</link> for more information on using the CDF as a remapping function.


</para><note id="eip-724">Don't forget, you only want to equalize the left half of the image. The right half of the image must remain unmapped for comparison.</note></section><section id="eip-273"><title>Step 4: Convert from YUV to RGB</title><para id="eip-468">While the pixels coming in from the camera are in YUV format, the pixels going out to the tablet's display are in RGB format. You will need to convert your half-equalized YUV image into RGB format, and store the image in the matrix pointed to by <code>pRGB</code>.</para></section><para id="eip-312">When the application is launched on the Nexus 7, you must tap the <code>...</code> near the bottom right of the screen, and select "Hist EQ". When working correctly, the right half of the video should display the unprocessed input, and the left half of the video should display the equalized video. 
</para></section><section id="eip-644"><title>Extension: Other Tone Mappings</title><para id="eip-983">Histogram equalization is one special case of <link url="http://en.wikipedia.org/wiki/Tone_mapping">tone mapping</link>, which simulates higher dynamic range and results in more dramatic images. This section is completely optional, but if you are interested, explore and see what sort of "Instagram"-like effects you can achieve!</para></section></content>

</document>