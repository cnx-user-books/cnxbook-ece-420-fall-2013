<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Lab 2: Multirate Filtering</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45710</md:content-id>
  <md:title>Lab 2: Multirate Filtering</md:title>
  <md:abstract>You will implement a multirate system that includes three fininte impulse response filters.</md:abstract>
  <md:uuid>da1d2814-ed94-47cc-a190-8ef7a2deb492</md:uuid>
</metadata>
<featured-links>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit below.
       Changes to the links section in the source will not be saved. -->
    <link-group type="prerequisite">
      <link url="http://cnx.org/content/m45704/latest/" strength="3">Lab 2: Prelab part II</link>
    </link-group>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit above.
       Changes to the links section in the source will not be saved. -->
</featured-links>
<content>
    <section id="eip-595"><title>Part 1: Filter design using Matlab</title><para id="p6">Using the zero-placement method, design the FIR filters for
	  the multirate system in <link document="m45709" target-id="fig1">Lab 2: Overview</link>.
	  Recall that the 
	<m:math>
	  <m:ci>z</m:ci>
	</m:math>-transform of a length-
	<m:math>
	  <m:ci>N</m:ci>
	</m:math> FIR filter is a polynomial in 
	<m:math>
	  <m:apply>
	    <m:power/>
	    <m:ci>z</m:ci>
	    <m:cn>-1</m:cn>
	  </m:apply>
	</m:math>, and that this polynomial can be factored into
	<m:math>
	  <m:apply>
	    <m:minus/>
	    <m:ci>N</m:ci>
	    <m:cn>1</m:cn>
	  </m:apply>
	</m:math> roots.
      </para><equation id="eqn3">
	<m:math>
	  <m:apply>
	    <m:eq/>
	    <m:apply>
	      <m:ci type="fn">H</m:ci>
	      <m:ci>z</m:ci>
	    </m:apply>
	    <m:apply>
	      <m:plus/>
	      <m:ci><m:msub>
		  <m:mi>h</m:mi>
		  <m:mn>0</m:mn>
		</m:msub></m:ci>
	      <m:apply>
		<m:times/>
		<m:ci><m:msub>
		    <m:mi>h</m:mi>
		    <m:mn>1</m:mn>
		  </m:msub></m:ci>
		<m:apply>
		  <m:power/>
		  <m:ci>z</m:ci>
		  <m:cn>-1</m:cn>
		</m:apply>
	      </m:apply>
	      <m:apply>
		<m:times/>
		<m:ci><m:msub>
		    <m:mi>h</m:mi>
		    <m:mn>2</m:mn>
		  </m:msub></m:ci>
		<m:apply>
		  <m:power/>
		  <m:ci>z</m:ci>
		  <m:cn>-2</m:cn>
		</m:apply>
	      </m:apply>
	      <m:ci>⋯</m:ci>
	    </m:apply>
	    <m:apply>
	      <m:times/>
	      <m:apply>
		<m:minus/>
		<m:ci><m:msub>
		    <m:mi>z</m:mi>
		    <m:mn>1</m:mn>
		  </m:msub></m:ci>
		<m:apply>
		  <m:power/>
		  <m:ci>z</m:ci>
		  <m:cn>-1</m:cn>
		</m:apply>
	      </m:apply>
	      <m:apply>
		<m:minus/>
		<m:ci><m:msub>
		    <m:mi>z</m:mi>
		    <m:mn>2</m:mn>
		  </m:msub></m:ci>
		<m:apply>
		  <m:power/>
		  <m:ci>z</m:ci>
		  <m:cn>-1</m:cn>
		</m:apply>
	      </m:apply>
	      <m:apply>
		<m:minus/>
		<m:ci><m:msub>
		    <m:mi>z</m:mi>
		    <m:mn>3</m:mn>
		  </m:msub></m:ci>
		<m:apply>
		  <m:power/>
		  <m:ci>z</m:ci>
		  <m:cn>-1</m:cn>
		</m:apply>
	      </m:apply>
	      <m:ci>⋯</m:ci>
	    </m:apply>
	  </m:apply>
	</m:math>
      </equation>

      <para id="p7">
	Use this relation to design a low-pass filter
	(for the anti-aliasing and anti-imaging filters of the multirate 
	system) by placing twelve
	complex zeros on the unit circle at
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:apply>
	      <m:divide/>
	      <m:apply>
		<m:times/>
		<m:cn>3</m:cn>
		<m:pi/>
	      </m:apply>
	      <m:cn>8</m:cn>
	    </m:apply>
	  </m:apply>
	</m:math>,
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:apply>
	      <m:divide/>
	      <m:pi/>
	      <m:cn>2</m:cn>
	    </m:apply>
	  </m:apply>
	</m:math>,
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:apply>
	      <m:divide/>
	      <m:apply>
		<m:times/>
		<m:cn>5</m:cn>
		<m:pi/>
	      </m:apply>
	      <m:cn>8</m:cn>
	    </m:apply>
	  </m:apply>
	</m:math>, 
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:apply>
	      <m:divide/>
	      <m:apply>
		<m:times/>
		<m:cn>3</m:cn>
		<m:pi/>
	      </m:apply>
	      <m:cn>4</m:cn>
	    </m:apply>
	  </m:apply>
	</m:math>, 
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:apply>
	      <m:divide/>
	      <m:apply>
		<m:times/>
		<m:cn>7</m:cn>
		<m:pi/>
	      </m:apply>
	      <m:cn>8</m:cn>
	    </m:apply>
	  </m:apply>
	</m:math>, and 
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:pi/>
	  </m:apply>
	</m:math>.  This filter that you have just designed will
	serve for both FIR 1 and FIR 3.  For filter FIR 2 (operating
	at the decimated rate), use four equally-spaced zeros on the
	unit circle located at
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:apply>
	      <m:divide/>
	      <m:pi/>
	      <m:cn>4</m:cn>
	    </m:apply>
	  </m:apply>
	</m:math> and 
	<m:math>
	  <m:apply>
	    <m:mo>±</m:mo>
	    <m:apply>
	      <m:divide/>
	      <m:apply>
		<m:times/>
		<m:cn>3</m:cn>
		<m:pi/>
	      </m:apply>
	      <m:cn>4</m:cn>
	    </m:apply>
	  </m:apply>
	</m:math>.  Be sure to adjust the resulting filter
	coefficients to ensure that the gain does not exceed one  
	at any frequency.
      </para>

      <para id="p8">
	Design your filters by writing a MATLAB script to compute the
	filter coefficients from the given zero locations.  The MATLAB
	function <code>poly</code> is very useful for this; type
	<code>help poly</code> in MATLAB for details.
      </para>

      <para id="p9">
        Once you have determined the coefficients of the filters, use
        MATLAB function <code>freqz</code> to plot the frequency
        responses.  You will find that the frequency response of these
        filters has a large gain.  Adjust the resulting filter
        coefficients to ensure that the largest frequency gain is less
        than or equal to one by dividing the coefficients by an
        appropriate value.  Do the frequency responses match your
        expectations based on the locations of the zeros in the
        z-plane?
      </para>
</section>  <section id="eip-588"><title>Part 2: Modular Functions by Mixing C and ASM</title><para id="eip-366">In <link document="m45702">Part 2 of Lab 1</link>, you learned how to return a value from assembly to C. High-level C program is easy to develop and maintain, while assembly program directly exploits specialized instructions, providing run-time efficiency.</para><para id="eip-193">In this section, you will learn how to pass in an argument from C to the assembly function. More specifically, in the cascaded multirate system, the output of one filtering or rate conversion block is the input to another block. Thus the C program needs to be able to pass the argument to the assembly function. Your new function declaration should be of the following form:

<code id="eip-58" display="block">extern int filter(int filt_input);</code></para><para id="eip-268">To do this, review <emphasis>Sections 6.4 and 6.5</emphasis> of the <cite url="http://www.ti.com/lit/ug/spru281g/spru281g.pdf"><cite-title>TMS320C55x Optimizing C/C++ Compiler User's Guide</cite-title></cite>. Pay attention to the naming convention, data types and passing arguments order.</para></section>
<section id="sec3">
      <title>Part 3: Multirate System Implementation on the DSP</title><para id="eip-855">Implement the complete multirate system shown in <link document="m45709">Lab 2: Overview</link>.  Here are some guidelines:</para><list id="eip-45"><item>First, implement a system that cascades only FIR 1 and FIR 2; exclude the sample-rate compressor, expander, and FIR3. Verify that the response of this two-filter system is as expected. The filters should be written in assembly (as in Lab 1), but the cascading can be done in C.</item>
<item>Next, implement the entire multirate system. Use a counter to implement the sample-rate compressor and expander. That is, the counter will determine when the compressed-rate processing is to occur, and it can also be used to determine when to insert zeros into FIR 3 to implement the sample-rate expander. This control flow can be written in C.</item>
<item>At first, use fixed compression and expansion
	factors of
	<m:math>
	  <m:apply>
	    <m:eq/>
	    <m:ci>D</m:ci>
	    <m:ci>U</m:ci>
	    <m:cn>4</m:cn>
	  </m:apply>
	</m:math>.  After you have verified that the multirate system
        works at a fixed rate, you should modify your code so that the 
        rate can be changed easily. 
        <emphasis>You must be able to quickly change the compression and expansion  
        factors when you demo your code</emphasis>.</item></list><!--
      <section id="sec3b">
	<name>Real-time rate change and MATLAB interface (Optional)</name>
	<para id="p16">A simple graphical user interface (GUI) is available (as
	  <link src="mrategui.m">mrategui.m</link>, which requires
	  <link src="rtdx_snd.m">rtdx_snd.m</link>) that sends a number
	  between 1 and 10 to the DSP via the usb port.  This can
	  be used to change the compression and expansion factor in
	  real time.
	</para>
	<para id="p18">
	  Run the GUI by typing <code>mrategui</code> at the MATLAB
	  prompt.  A figure should automatically open up with a slider
	  on it; adjusting the slider changes the compression and
	  expansion factor sent to the DSP.
	</para>

	<para id="element-186">To add RTDX capability to your program, include the <code>target.h</code> at the top of the <code>main.c</code> file. In the main function, call <code>TARGET_INITIALIZE()</code> to initialize the board for RTDX. In the while loop of of the main function, add the following code before the call to the assembly function: </para><code type="block"><![CDATA[
       RTDX_enableInput(&ichan);

       if ( !RTDX_channelBusy(&ichan)) {
            RTDX_readNB( &ichan, &rate, sizeof(rate));
       }

       RTDX_disableInput(&ichan);
]]>
</code><para id="element-634">Prior to loading the program file to the DSP board, you need to select  <code>Tools -&gt; RTDX -&gt; Configuration Control</code>. In the window that appears, make sure <code>Enable RTDX</code> is selected.</para><para id="p17">The assembly code for interacting with the serial port, provided in   
          the handout <cnxn document="m10821">Core File: Serial Port 
          Communication Between MATLAB and TI TMS320C54x</cnxn>, stores the     
          last number that the DSP has received from the computer in the
	  memory location labeled <code>rate</code>.  Therefore,
	  unless you have changed the serial portion of the given
	  code, you can find the last compression and expansion factor
	  set by the GUI in this location.  You need to modify your
	  code so that each time a new number is received on the
	  serial port, the compression and expansion factor is
	  changed.  If a "1" is received on the serial port, the
	  entire system should run at the full rate; if a "10" is
	  received, the system should discard nine samples between
	  each sample processed at the lower rate.
	</para>
	<para id="p14">
	  Note that the <code>READSER</code> and <code>WRITSER</code>
	  macros, which are used to read data from and send data to
	  the serial port, overwrite <code>AR0</code>,
	  <code>AR1</code>, <code>AR2</code>, and <code>AR3</code>
	  registers, as well as <code>BK</code> and the condition flag
	  <code>TC</code>.  You must therefore ensure that these
	  registers are not used by your code, or that you save and
	  restore their values in memory before you call the
	  <code>READSER</code> and <code>WRITSER</code> macros.  This
	  can be done using the <code>mvdm</code> and
	  <code>mvmd</code> instructions.  The serial macros set up
	  the <code>AR1</code> and <code>AR3</code> each time they are
	  called, so there is no need to change these registers before
	  the macros are called.
	</para>

	<para id="p15">
	  More detail about the <code>READSER</code> and
	  <code>WRITSER</code> macros can be found in <cnxn document="m10821">Core File: Serial Port Communication
	  Between MATLAB and TI TMS320C54x</cnxn>.
	</para>

      </section>
-->
    </section>
  </content>
</document>